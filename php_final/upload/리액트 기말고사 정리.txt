--7장--
라이프사이클 메서드 : 라이프사이클 메서드는 클래스형 컴포넌트에서만 사용이 가능했으나 Hooks기능을 사용하면 함수형 컴포넌트에서도 사용이 가능하다.

라이프사이클은 총 세가지로 마운트, 업데이트, 언마운트 카테고리로 나뉜다.

컴포넌트의 라이프사이클 

		컴포넌트 정보를 업데이트 (리렌더링)
                                  업데이트

마운트                                                     언마운트
(페이지에 컴포넌트가 나타남)            (페이지에서 컴포넌트가 사라짐)


마운트 할때 호출하는 메서드

컴포넌트 만들기 -> constructor(라이프 사이클 x , 자바스크립트 생성자, 필수) -> getDerivedStateFromProps -> render(필수) -> componentDidMount(필수)

getDerivedStateFromProps : props에 있는 값을 state에 넣을 때 사용하는 메서드, static 을 필요로 하고, 이 안에서는 this 사용 불가, 마운트 과정에서도 호출 업데이트 시작전에도 호출

componentDidMount : 컴포넌트가 웹 브라우저상에 나타난 후 호출하는 메서드 

업데이트를 발생시키는 요인 : 무언가가 변경 될떄

getDerivedStateFromProps -> shouldComponentUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate(주로 사용)

shouldComponentUpdate : 변경이 있을때 리렌더링을 시작할지 여부를 지정하는 메서드 false면 업데이트 중지 true면 그대로 진행

getSnapshotBeforeUpdate : 컴포넌트가 DOM 반영 직전에 호출

componentDidUpdate : 업데이트(리렌더링) 과정이 끝난 후 호출

언마운트 : 컴포넌트를 DOM에서 제거하는 것

componentWillUnmount : 컴포넌트가 웹 브라우저에서 사라지기 전에 호출하는 메서드


render : 라이프 사이클 메서드중 필수 메서드, 이벤트 설정이 아닌 곳에서 setState를 사용하면 안됨, 브라우저의 DOM에 접근해서도 안됨, DOM 정보를 가지고 오거나 state에 변화를 줄때는
componentDidMount사용

constructor : 컴포넌트 생성자 메소드이고 초기 state값 설정가능

--6장--
리액트는 정형화 되어있고 많은양의 데이터를 연속해서 만든다.
npm: 한 번 만들어 놓고 여러가지를 돌려쓴다.

내가 필요한거를 계속 추가해 기존꺼는 자동으로 수거하니까 - 가비지 컬렉터
리액트는 싱글웹이다 : 라우터 개념


